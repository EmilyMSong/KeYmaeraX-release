program push-pull =
  {accA := A; ++ accA := -A;}
  {accD := D; ++ accD := -D:}^d
  {x' = v, v' = aacA+accD}.

theorem demon-symmetric-push-pull =
  ?(vz & sym & Apos): (v = 0 & A = D & A > 0);
init:
     {accA := A; accD := -D}
  ++ {accA := -A; accD := D}
  [?cancel: accA+accD = 0 using accA accD sym;]
  [?vInv: (v = v@init)]
  [?xInv: (x = x@init)]
  { <x' = v, v' = accA+accD>
    [& vInv: (v = v@init) using cancel]
    [& xInv: (x = x@init) using vz vInv]
  }
  [?goal: x = x@init using xInv].

refine
  demon-symmetric-push-pull
  (x = x0 & v = 0 & A = D & A > 0 -> [push-pull] x = x0).

theorem angel-asymmetric-push-pull =
  ?(vz & asym & Dpos & goal): (v = 0 & A > D & D > 0 & x < g);
  [rate := A - D;]
  [dist := g - x;]
  [dur := sqrt(2*dist/rate);]
init:
  accA := A;
  {accD := D; ++ accD := -D;}
  [a := accA - accD;]
  [? fast: (a >= rate) using a rate asym accA accD;]
  [t := 0;]
  {< [t' = 1], x' = v, v' = a >
    [&tInv: (t>= 0) using t]
    [&vInv: (v = v@init + t*a) using tInv]
    [&xInv: (x = x@init + v@init*t + t^2*a/2) using tInv xInv]
    [t := dur;]
  }
  [?goal: x >= g using a t dur dist rate fast xInv;]

refine
  angel-asymmetric-push-pull
  (v=0 & A>D & D>0 & x<g -> <cake> x >= g).





