game push-pull =
  {accA := A; ++ accA := -A;}
  {accD := D; ++ accD := -D:}^d
  {x' = v, v' = aacA+accD}.

theorem demon-symmetric-push-pull =
 assume (vz & sym & Apos): (v = 0 & A = D & A > 0);
init:
 either
   modify accA := A   modify accD := -D
 or
   modify accA := -A  modify accD := D
 end
 assert cancel: accA+accD = 0 using accA accD sym
 initially
  vInv: (v = v@init)
  xInv: (x = x@init)
 ode
  x' = v, v' = accA+accD
 invariant
  vInv: (v = v@init) using cancel
  xInv: (x = x@init) using vz vInv
 weaken
 assert goal: x = x@init using xInv.

refine
  demon-symmetric-push-pull
  (x = x0 & v = 0 & A = D & A > 0 -> [push-pull] x = x0).

theorem angel-asymmetric-push-pull =
  assume (vz & asym & Dpos & goal): (v = 0 & A > D & D > 0 & x < g)
  let rate = A - D
  let dist = g - x
  let dur = sqrt(2*dist/rate)
init:
  modify accA := A
  either
    modify accD := D
  or
    modify accD := -D
  end
  let a = accA - accD
  assert  fast: (a >= rate) using a rate asym accA accD
  let t = 0
  ode
    x' = v, v' = a
  ghost
    t' = 1
  invariant
    tInv: (t>= 0) using t
    vInv: (v = v@init + t*a) using tInv
    xInv: (x = x@init + v@init*t + t^2*a/2) using tInv xInv
  duration
    t = dur
  assert goal: x >= g using a t dur dist rate fast xInv.

refine
  angel-asymmetric-push-pull
  (v=0 & A>D & D>0 & x<g -> <cake> x >= g).





