ArchiveEntry "FM16/Tutorial Example 1"
  Description "Simple model of straight-line driving. Car can never accelerate because of an always-false acceleration guard.".
  Title "1-dimensional car with false acceleration guard".
  Link "http://www.ls.cs.cmu.edu/KeYmaeraX/tutorial/KeYmaeraX-tutorial.pdf#page=23".

ProgramVariables
  Real m;  /* Stop-sign position */
  Real A;  /* Maximum acceleration */
  Real b;  /* Maximum braking */
  Real ep; /* Maximum control cycle duration */
  Real x;  /* Car position */
  Real v;  /* Speed */
  Real a;  /* Actual acceleration */
  Real sb; /* Start braking point */
  Real t;  /* Controller clock */
End.

Problem
    x <= m
  & A >= 0
  & b > 0
  & ep > 0
  & v = 0
->
  [{
     {   ?x > m; a := A;
      ++ a := -b;
     }
     t := 0;
     { x'=v, v'=a, t'=1 & v >= 0 & t <= ep }
   }*@invariant(x<=m & v=0)
  ]x <= m
End.

Tactic "Proof Formal Methods Tutorial Example 1"
  master
End.

End.

ArchiveEntry "FM16/Tutorial Example 2"
  Description "Simple model of straight-line driving that avoids collision. Car can accelerate or break, with the start braking distance left abstract.".
  Title "1-dimensional car with abstract start braking distance".
  Link "http://www.ls.cs.cmu.edu/KeYmaeraX/tutorial/KeYmaeraX-tutorial.pdf#page=50".

ProgramVariables
  Real m;  /* Stop-sign position */
  Real A;  /* Maximum acceleration */
  Real b;  /* Maximum braking */
  Real ep; /* Maximum control cycle duration */
  Real x;  /* Car position */
  Real v;  /* Speed */
  Real a;  /* Actual acceleration */
  Real sb; /* Start braking point */
  Real t;  /* Controller clock */
End.

Problem
    x <= m
  & A >= 0
  & b > 0
  & ep > 0
  & v = 0
->
  [{
     {   ?m - x >= sb; a := A;
      ++ a := -b;
     }
     t := 0;
     { x'=v, v'=a, t'=1 & v >= 0 & t <= ep }
   }*
  ]x <= m
End.

Tactic "Steps Formal Methods Tutorial Example 2"
useSolver("Mathematica");
implyR(1); andL('L)*; loop("x<=m", 1); <(
  prop; done,
  prop; done,
  unfold; <(
    solve(1); pQE; transform("m-x>=A/2*ep^2+ep*v", 1),
    solve(1); pQE; transform("m-x>=v^2/(2*b)", 1)
    )
  ) partial
End.

End.

ArchiveEntry "FM16/Tutorial Example 3"
  Description "Simple model of straight-line driving that avoids collision. Car can accelerate or break, with the start braking distance left abstract.".
  Title "1-dimensional car with safe start braking distance".
  Link "http://www.ls.cs.cmu.edu/KeYmaeraX/tutorial/KeYmaeraX-tutorial.pdf#page=97".

ProgramVariables
  Real m;  /* Stop-sign position */
  Real A;  /* Maximum acceleration */
  Real b;  /* Maximum braking */
  Real ep; /* Maximum control cycle duration */
  Real x;  /* Car position */
  Real v;  /* Speed */
  Real a;  /* Actual acceleration */
  Real sb; /* Start braking point */
  Real t;  /* Controller clock */
End.

Problem
    x <= m
  & A >= 0
  & b > 0
  & ep > 0
  & v = 0
->
  [{
     {   ?m - x >= v^2/(2*b) + (A/b + 1)*(A/2*ep^2 + ep*v); a := A;
      ++ a := -b;
     }
     t := 0;
     { x'=v, v'=a, t'=1 & v >= 0 & t <= ep }
   }*@invariant(v >= 0 & x + v^2/(2*b) <= m)
  ]x <= m
End.

Tactic "Proof Formal Methods Tutorial Example 3"
implyR(1) ; andL('L)* ; loop("v>=0&x+v^2/(2*b)<=m", 1) ; <(
  QE; done,
  QE; done,
  composeb(1) ; composeb(1.1) ; solve(1.1.1) ; assignb(1.1) ; choiceb(1) ; composeb(1.0) ; assignb(1.0.1) ; testb(1.0) ;
    assignb(1.1) ; andR('R) ; doall(prop ; QE("Mathematica") ; done)
  )
End.
End.

ArchiveEntry "FM16/Tutorial Example 4"
  Description "Proving unsolvable ODEs with differential invariants.".
  Title "Increasingly Damped oscillator".
  Link "http://www.ls.cs.cmu.edu/KeYmaeraX/tutorial/KeYmaeraX-tutorial.pdf#page=114".

Definitions
  Real w();
  Real c();
End.

ProgramVariables
  Real x;
  Real y;
  Real d;
End.

Problem
    w()^2*x^2 + y^2 <= c()^2
  & d>=0
->
  [{x'=y, y'=-w()^2*x-2*d*w()*y, d'=7 & w()>=0}]w()^2*x^2 + y^2 <= c()^2
End.

Tactic "Proof Formal Methods Tutorial Example 4"
  implyR(1); dC("d>=0", 1); doall(dI(1); done)
End.
End.

ArchiveEntry "FM16/Tutorial Example 5"
  Description "Simple model of steering, car avoids collision with other cars.".
  Title "2-dimensional car".
  Link "http://www.ls.cs.cmu.edu/KeYmaeraX/tutorial/KeYmaeraX-tutorial.pdf#page=130".

Definitions
  Real ep;   /* time limit for control decisions */
  Real B;    /* minimum braking capability of the robot */
  Real A;    /* maximum acceleration -B <= a <= A */
End.

ProgramVariables
  Real x;    /* robot position: x */
  Real y;    /* robot position: y */
  Real v;    /* robot translational velocity */
  Real a;    /* robot translational acceleration */
  Real dx;   /* robot orientation: x */
  Real dy;   /* robot orientation: y */
  Real w;    /* robot rotational velocity */
  Real r;    /* radius of curve (i)straight: k=infty; (ii)curve: k!=infty */
  Real xo;   /* position summary of obstacles */
  Real yo;
  Real t;    /* time */
End.

Problem
    v >= 0
  & ( abs(x-xo) > v^2 / (2*B)
    | abs(y-yo) > v^2 / (2*B))
  & dx^2 + dy^2 = 1
  & A >= 0
  & B > 0
  & ep > 0
  & r != 0
  ->
  [
    {
      {
        {
          /* brake on current curve or remain stopped */
          { a := -B; }
          ++
          { ?v = 0; a := 0; w := 0; }
      	  ++
          /* or choose a new safe curve */
          { a :=*; ?-B <= a & a <= A;
            r :=*; ?r != 0;
            w :=*; ?v = w/r;

            /* for the chosen a, w, cx, cy: worst case position of obstacles wrt. curve */
            xo :=*;
            yo :=*;

            /* use that curve, if it is a safe one (admissible velocities) */
            ? abs(x-xo) > v^2/(2*B) + (A/B + 1) * (A/2 * ep^2 + ep*v)
            | abs(y-yo) > v^2/(2*B) + (A/B + 1) * (A/2 * ep^2 + ep*v);
    	  }
    	};
    	t := 0;
      }

      /* dynamics */
      { x' = v * dx,
        y' = v * dy,
        dx' = -w * dy,
        dy' = w * dx,
        v' = a,
        w' = a/r,
        t' = 1 & t <= ep & v >= 0
      }
    }*@invariant(v >= 0
                  & dx^2+dy^2 = 1
                  & r != 0
                  & (abs(x-xo) > v^2 / (2*B)
                   | abs(y-yo) > v^2 / (2*B)))
  ] (x - xo)^2 + (y - yo)^2 > 0
End.

Tactic "Proof Formal Methods Tutorial Example 5"
implyR(1); (andL('L)*); loop("v>=0&dx^2+dy^2=1&r!=0&(abs(x-xo)>v^2/(2*B())|abs(y-yo)>v^2/(2*B()))", 1); <(
  print("Base"); prop; print("Base done"); done,
  print("Use"); QE; print("Use done"); done,
  print("Unfolding..."); unfold; print("Unfolded"); <(
    print("Case 1");
    diffInvariant("t>=0", 1);
    print("Bar");
    diffInvariant("dx^2+dy^2=1", 1);
    diffInvariant("v=old(v)-B()*t", 1);
    diffInvariant("-t*(v+B()/2*t)<=x-old(x)&x-old(x)<=t*(v+B()/2*t)", 1);
    diffInvariant("-t*(v+B()/2*t)<=y-old(y)&y-old(y)<=t*(v+B()/2*t)", 1);
    dW(1); QE; done
    ,
    print("Case 2");
    diffInvariant("t>=0", 1);
    diffInvariant("dx^2+dy^2=1", 1);
    diffInvariant("v=old(v)", 1);
    diffInvariant("x=old(x)", 1);
    diffInvariant("y=old(y)", 1);
    dW(1); QE; done
    ,
    print("Case 3");
    hideL(-13=="abs(x-xo_0)>v^2/(2*B())|abs(y-yo_0)>v^2/(2*B())");
    print("Foo");
    diffInvariant("t>=0", 1);
    print("Bar");
    diffInvariant("dx^2+dy^2=1", 1);
    diffInvariant("v=old(v)+a*t", 1);
    diffInvariant("-t*(v-a/2*t)<=x-old(x)&x-old(x)<=t*(v-a/2*t)", 1);
    diffInvariant("-t*(v-a/2*t)<=y-old(y)&y-old(y)<=t*(v-a/2*t)", 1);
    dW(1); prop; <(
      hideR(2=="abs(y-yo)>v^2/(2*B())");
      transformEquality("ep()=t", 'L=="abs(x_0-xo)>v_0^2/(2*B())+(A()/B()+1)*(A()/2*ep()^2+ep()*v_0)");
      smartQE; done
      ,
      hideR(1=="abs(x-xo)>v^2/(2*B())");
      transformEquality("ep()=t", 'L=="abs(y_0-yo)>v_0^2/(2*B())+(A()/B()+1)*(A()/2*ep()^2+ep()*v_0)");
      smartQE; done
    )
  )
)
End.
End.
