ArchiveEntry "ETCS Safety without Emergency Brake"

/**
 * Safety lemma for European Train Control System with extended braking model
 * @provable
 * @see "Andre Platzer and Jan-David Quesel. European Train Control System: A case study in formal verification. In Karin Breitman and Ana Cavalcanti, editors, 11th International Conference on Formal Engineering Methods, ICFEM, Rio de Janeiro, Brasil, Proceedings, volume 5885 of LNCS, pages 246-265. Springer, 2009."
 * @see "Werner Damm, Alfred Mikschl, Jens Oehlerking, Ernst-Ruediger Olderog, Jun Pang, Andre Platzer, Marc Segelken and Boris Wirtz. Automating verification of cooperation, control, and design in traffic applications. In Cliff Jones, Zhiming Liu and Jim Woodcock, editors, Formal Methods and Hybrid Real-Time Systems, volume 4700 of LNCS, pp. 115-169. Springer, 2007."
 */
Definitions
  Real A;
  Real ep;
  Real Rw;     /* wheel radius */
  Real mu;     /* adhesion between wheel and track */
  Real ms;     /* train mass */
  Real cr;     /* roll resistance */
  Real ca1;    /* air quadratic factor */
  Real ca2;    /* air linear factor */
  Real g;      /* gravity */
  Real sp;     /* sin(phi) of track slope phi */
  Real sbsc;   /* brake force scaling factor */
  Real voff;   /* offset to ensure brake force close to v=zero */
  Real ebc;    /* emergency brake */
  Real Ft(Real Tw)         = mu*Tw/Rw;                      /* traction force  Ft(Tw) = mu*Tw/Rw */
  Real Fe(Real v)          = Fr()+ms*g*sp;                  /* external force Fe(v)   = Fr+ms*g*sp */
  Real Fr()                = ms*cr;                         /* roll resistance Fr()   = ms*cr */
  Real Fb(Real v, Real Ib) = ( (v*(Ib-1)+voff)*sbsc+ebc );  /* brake force    Fb(vIb) = (v*(Ib-1)+voff)*sbc+ebc */
End.

ProgramVariables
	Real vdes;
	Real SB;
	Real mo;
	Real t;
	Real Tw;     /* engine angular momentum, used as acceleration for now, actually f(v_eng) angular velocity of engine */
	Real Ib;     /* brake current (controlled), 1/s */
	Real v;
	Real z;
	Real m;
	Real d;
	Real do;
	Real em; /* emergency braking: 0=off, 1=on */
End.

Problem.
em = 0 & v^2 - d^2 <= 2*(voff*sbsc/ms)*(m-z) & d >=0 & A >= 0 & ep >= 0 & v>=0
  /* actual constant properties */
  & mu >= 0 & Tw >= 0 & Rw > 0 & sbsc > 0 & ebc >= 0 & ms > 0 & g > 0 & cr >= 0 & -1<=sp&sp<=1
  /* simplifications for a first proof */
  & mu=1 & Rw=1               /* traction Tr(Tw) = Tw */
  & voff=1                    /* brake improvement close to 0 = sbsc */
  & ebc=0                     /* no extra emergency brake */
  & cr=0                      /* disables roll resistance */
  & sp=0                      /* flat track */
  /* Fe(v) = 0 by previous 3 lines */
  ->
  [{
       {
           do := d; mo := m; m :=*; d :=*; vdes :=*; ?d >= 0 & do^2 - d^2 <= 2*(voff*sbsc/ms)*(m-mo) & vdes >= 0;
        ++ em := 1;
       }
    ++ {
         {    ?v <= vdes; Ib:=1; Tw:=*; ?0<=Tw & Tw<=A;
           ++ ?v >= vdes; Tw:=0; Ib:=*; ?1 <= Ib;
         };
         SB := (v^2 - d^2)/(2*voff*sbsc/ms) + ((A/ms)/(voff*sbsc/ms)+1)*((A/ms)/2*ep^2+ep*v);
         {   ?  m - z <= SB | em = 1; Tw:=0; Ib:=*; ?1 <= Ib; /* we have at least voff*sbsc/ms braking */
          ++ ?!(m - z <= SB | em = 1);
         }
         t:=0;
         {z'=v, v' = (Ft(Tw)-Fe(v)-Fb(v, Ib))/ms, t'=1 & v >= 0 & t <= ep}
       }
   }*@invariant(v^2 - d^2 <= 2*(voff*sbsc/ms)*(m-z) & d >= 0)
  ](z >= m -> v <= d)
End.

Tactic "Proof"
/* tactic definitions */
tactic odeBrakeT as (
  diffInvariant({`t>=0`},'R);
  diffInvariant({`v<=old(v)-(voff*sbsc/ms)*t`},'R);
  diffInvariant({`z<=old(z)+old(v)*t-(voff*sbsc/ms)/2*t^2`},'R);
  dW('R)
);
tactic odeAccT as (
  diffInvariant({`t>=0`},'R);
  diffInvariant({`v=old(v)+(Tw/ms-voff*sbsc/ms)*t`},'R);
  diffInvariant({`z=old(z)+v*t-(Tw/ms-voff*sbsc/ms)/2*t^2`},'R);
  dW('R)
);
prop;
loop({`v^2 - d^2 <= 2*(voff()*sbsc()/ms())*(m-z) & d >= 0`}, 1); <(
  QE,
  QE,
  unfold; <(
    /* RBC: drive */ expandAllDefs; QE,
    /* RBC: emergency brake closes propositionally in unfold */
    /* Train: protect, override acc.  */ expandAllDefs; odeBrakeT,
    /* Train: protect, override brake */ expandAllDefs; odeBrakeT,
    /* Train: vel. control: acc. */      expandAllDefs; odeAccT,
    /* Train: vel. control: brake */     expandAllDefs; odeBrakeT
  );
  doall(QE)
);
done

End.

End.
