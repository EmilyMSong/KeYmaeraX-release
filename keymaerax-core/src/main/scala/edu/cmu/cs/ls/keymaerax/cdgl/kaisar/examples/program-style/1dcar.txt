define [
 C := max(A,B);
 SB := v^2/2*C;
 BM := (1/2)*(-2*T*sqrt(C*g) + C*T^2 + g);
 AM := (1/2)*(2*T*sqrt(C*g) - C*T^2 + g);
 LS(x) := sqrt(2*C*x);
 RS(x) := sqrt(2*C*(g-x));
 UV(x) := min(LS(x), RS(x));
 LV(x) := min(SLS(x), SRS(x);
 inRegion1 (x,v) := SLS(x) <= v & v <= LS(x) & SRS(x) >= SLS(x);
 inRegion2 (x,v) := SRS(x) <= v & v <= RS(x) & LS(x) >= SRS(x);
 J := LV(x) <= v & v <= UV(x) & x >= 0 & v >= 0;
]

program 1dcar =
 { a:=*; ?-B <= a & a <= A;
   t:=0; {t'=1, x'=v,v'=a & t<=T & v>=0}^d;
 ?(x <= g); {?t >= T/2;}^d
 }*

/* Lemma 18 in paper */
lemma safe-upper =
  ?pos: C > 0;/
  ?pre: v <= UV(x);
  [?goal: g - x >= SB(v);]

theorem reach-avoid =
 ?pre: T>0 & A>0 & B>0 & v=0 & x=0;
[xMid := g / 2;
 accEnd := C*(sqrt(g) - T*sqrt(C))^2/(g + 2*T*sqrt(C*g) - C*T^2);
 SLS(x) := sqrt(2*accEnd*x);
 SRS(x) := sqrt(2*accEnd*(g-x));
 Dx := accEnd*T^2/8;
 dX := (xMid âˆ’ BM);
 ?conj: xMid - BM = AM - xMid using BM AM
 ?inv: J using pre]
 while(inv(g-x): J) {
loop:
  [accCand := (sqrt(C)*sqrt(C*T^2 + 8*g - 4*T*v - 8*x) - C*T - 2gv)/2*T;]
  a := min(C, accCand);
  [?Cbound:(-C <= acc <= C) using pre J C
   /* Lemma 19 in paper */
   ?range: (-B <= a & a <= A) using Cbound C]
  t:=0;
  {t'=1, x'=v, v'=a & tCon: (t<=T) & vCon: (v>=0);}
ode:
  ?tPos: t >= 0;
  [?vHi: v <= UV(x) using UV acc v
  ?vLo1: inRegion1 (x,v) -> v <= UV(x)
   proof
     ?inR: inRegion1 (x,v);
    [dX := x - x@loop;
     ?extremumUL:(v = LS(x) & v = SRS(x) -> dX = xMid - BM) using inR
     ?monoUL:(\forall v, v = LS(x) & v <= SRS(x) -> dX <= xMid - BM) using extremumUL dX;
     ?extremumUR:(v = SLS(x) & v = SRS(x) -> dX = xMid - BM) using inR
     ?monoUR:(\forall v, v = SLS(x) & v <= SRS(x) -> dX <= xMid - BM) using extremumUR dX;
     ?amBound: X(T) <= AM using conj
     ?atMin: accEnd = a -> v = UV(x) using amBound
     ?accBound: a >= accEnd & a <= C using acc-bound by mono
     ?goal: v <= UV(x) using accEnd monoUL monoUR by mono]
   qed
  ?vLo2: inRegion2 (x,v) -> v <= UV(x)
   proof
     ?inR: inRegion2 (x,v);
     // acceleration that reaches x=g when v=0
     [accSimp := v^2 / 2*(g-x);
     ?simpBound: -C <= accSimp & accSimp <= -accEnd using inR
     ?goal: v <= UV(x) using simpBound by mono]
   qed
  ?vLo := MinE(acc, vLo1, vLo2);
  ?vBound := AndI (vLo, vHi); //  Darith3 in paper
  /* Darith1 in paper */
  ?safe: x <= g proof
   [?RSmax: v <= UV(x) & UV(x) <= RS(x) using vBound
    ?SB: v^2/2*C <= g - x using RSmax
    ?sign: v^2/2*C >= 0;
    ?safe: x <= g using Trans(sign, SB)]
  qed]
  ?tLo: t >= T/2;
  /* Darith2 in paper */
  [?inv: (g - x = 0 | g - x + Dx <= (g-x)@loop & J proof
    [?xPos := x >= 0 using x v tLo vCon // by ode solution
    ?variant := AndI(vLo, vCon, xPos);
    tol := accEnd*T^2/16;
    ?tolPos: tol > 0 using accEnd;]
    ?decr := (g-x)@loop >= Dx + g-x | g = x proof
      [?dist: g - x <= 2*tol | g-x >= tol using tolPos by split]
      { ?far: g - x >= tol;
        [?delta:  x - x@loop >= accEnd*T^2/8 using far tLo
        ?remain: g - x@loop >= accEnd*T^2/8 using delta safe
        // worst case x = 0, a= accEnd yields x - x@loop = 2*tol
        ?delta1: (g-x)@loop >= Dx + (g - x) using remain x tLo by mono
        ?delta2: x >= Dx + x@loop using delta1 by algebra]
      } ++ {
        ?close: g - x <= 2*tol;
       [?brakeRate: v^2/2*a = (g-x) using acc
        ?live: g = x using brakeRate close tLo]
      }
    qed]
    ?inv := AndI(variant, decr);]
  qed]
 }*
 ?fin: (J & g = x);
[?goal: x = g using fin]